#!/usr/bin/env python2

"""
api_batch_labelling.py

Author: Jan Zahalka, bohem.ai

Given an image directory or a list of URLs as a parameter, outputs the
CliqOrange labels for each image.
"""

import argparse
import os
import requests

API_ENDPOINT = "http://api.cliqorange.com/all_labels"


# =========
#  METHODS
# =========
def label_images_by_urls(list_path, user_key):
    """
    Collects CliqOrange API labels from image URLs provided in a CSV file (one
    URL per line).
    """
    # Go over all the URLs, one per line
    with open(list_path, 'r') as f:
        for line in f:
            # Trim whitespace at the end of the line
            image_url = line.strip()

            data = dict()
            data['image'] = image_url
            data['user_key'] = user_key

            labels = requests.post(API_ENDPOINT, data=data).text

            print("+++ %s +++" % image_url)
            print(labels)
            print("")


def label_images_by_file_upload(image_dir, user_key):
    """
    Collects CliqOrange API labels from images in the provided directory.
    """

    image_names = os.listdir(image_dir)

    for image_name in image_names:
        image_path = os.path.join(image_dir, image_name)

        data = dict()
        data['user_key'] = user_key

        files = dict()
        files['image'] = open(image_path, 'rb')

        labels = requests.post(API_ENDPOINT, data=data, files=files).text

        print("+++ %s +++" % image_path)
        print(labels)
        print("")


# ===============
#  SCRIPT BODY
# ===============
# Argument definition
parser = argparse.ArgumentParser()
parser.add_argument('user_key_file', help='Path to the file with the user '
                    'key.')
parser.add_argument('--dir', '-d', help='Path to image directory.')
parser.add_argument('--list', '-l', help='Path to the CSV with the URLs.')

args = parser.parse_args()

# Get the user API key
if not os.path.exists(args.user_key_file):
    print("ERROR: User key file not found!")
    exit()

with open(args.user_key_file, 'r') as f:
    user_key = f.read()

if user_key[-1] == '\n':  # If the user key ends with newline, trim it
    user_key = user_key[:-1]

# If no input files specified, exit
if args.dir is None and args.list is None:
    print("ERROR: No input files (image directory or CSV with URLs) "
          "specified.")
    exit()

# Validate the directory
if args.dir:
    if not os.path.exists(args.dir):
        print("ERROR: The directory does not exist!")
        exit()

    if not os.path.isdir(args.dir):
        print("ERROR: The specified path does not point to a directory!")
        exit()

    label_images_by_file_upload(args.dir, user_key)

# Validate the list
if args.list:
    if not os.path.exists(args.list):
        print("ERROR: The URL list not found on the specified path!")
        exit()

    if not os.path.isfile(args.list):
        print("ERROR: The specified path points to a directory, not a regular "
              "file!")
        exit()

    label_images_by_urls(args.list, user_key)
